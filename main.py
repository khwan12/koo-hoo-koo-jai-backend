# main.py
from flask import Flask, request, jsonify, render_template
import os
from openai import OpenAI

app = Flask(__name__, template_folder='templates', static_folder='static')

# ‡πÇ‡∏´‡∏•‡∏î OpenRouter API Key ‡∏à‡∏≤‡∏Å Secrets
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
YOUTUBE_API_KEY = os.environ.get("YOUTUBE_API_KEY")  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á/‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á

if not OPENROUTER_API_KEY:
    raise ValueError("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENROUTER_API_KEY ‡πÉ‡∏ô Secrets ‡∏Ç‡∏≠‡∏á Replit")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á OpenRouter client
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY
)

# ========== YouTube Helper ==========
def search_youtube(query):
    if not YOUTUBE_API_KEY:
        return None
    try:
        from googleapiclient.discovery import build
        youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)
        request = youtube.search().list(
            q=query,
            part='snippet',
            type='video',
            maxResults=1
        )
        response = request.execute()
        if response['items']:
            video = response['items'][0]
            return {
                'videoId': video['id']['videoId'],
                'title': video['snippet']['title']
            }
    except Exception as e:
        print("YouTube API Error:", e)
    return None

# ========== Routes ==========
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    try:
        data = request.get_json(force=True)
        prompt = data.get("prompt", "").strip()
        history = data.get("history", [])
        user_profile = data.get("profile", {})

        if not prompt:
            return jsonify({
                "response_type": "text",
                "data": "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° prompt"
            }), 400

        prompt_lower = prompt.lower()

        # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á ---
        if prompt_lower.startswith("‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á"):
            query = prompt.replace("‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á", "", 1).strip() or "‡πÄ‡∏û‡∏•‡∏á‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢"
            video = search_youtube(query)
            if video:
                return jsonify({
                    "response_type": "music",
                    "data": {
                        "text": f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á: **{video['title']}** üé∂",
                        "videoId": video['videoId']
                    }
                })
            else:
                return jsonify({
                    "response_type": "text",
                    "data": "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∞ üò¢"
                })

        # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á ---
        if prompt_lower.startswith("‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á"):
            query = prompt.replace("‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á", "", 1).strip() or "‡∏´‡∏ô‡∏±‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
            video = search_youtube(query)
            if video:
                return jsonify({
                    "response_type": "movie",
                    "data": {
                        "text": f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡∏±‡∏á: **{video['title']}** üé¨",
                        "videoId": video['videoId'],
                        "title": video['title']
                    }
                })
            else:
                return jsonify({
                    "response_type": "text",
                    "data": "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∞ üé•"
                })

        # --- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏≤ AI ---
        ai_persona = user_profile.get('aiPersona', '‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£')
        system_message = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏Ñ‡∏π‡πà‡πÉ‡∏à' ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å: "{ai_persona}"
‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤:
1. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
2. ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï" ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å ‡∏Å‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢:
   <div class='reference'>‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ‡∏Å‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï (‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô)</div>
3. ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢" ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å ‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏´‡∏£‡∏∑‡∏≠ ‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ ‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢:
   <div class='reference'>‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•, ‡∏à‡∏∏‡∏¨‡∏≤‡∏Ø (‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô)</div>
4. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
5. ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ó‡∏¢
"""

        messages = [{"role": "system", "content": system_message}]
        for msg in history:
            role = "user" if msg["role"] == "user" else "assistant"
            content = msg.get("parts", [{}])[0].get("text", "")
            messages.append({"role": role, "content": content})
        messages.append({"role": "user", "content": prompt})

        completion = client.chat.completions.create(
            model="google/gemini-flash-1.5-8b",
            messages=messages,
            temperature=0.7,
            max_tokens=1000
        )
        ai_text = completion.choices[0].message.content
        return jsonify({
            "response_type": "text",
            "data": ai_text
        })

    except Exception as e:
        return jsonify({
            "response_type": "text",
            "data": f"‚õîÔ∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
        }), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 81)))